{"version":3,"sources":["views/common/TextFieldGroup.js","views/pages/login/Login.js","shared/validations/login.js"],"names":["TextFieldGroup","field","value","label","error","type","onChange","checkUserExists","readOnly","placeholder","className","classnames","onBlur","name","defaultProps","Login","props","state","identifier","password","errors","isLoading","localStorage","removeItem","location","pathname","window","href","data","Validator","isEmpty","isValid","validateInput","this","setState","e","preventDefault","setItem","JSON","stringify","username","history","push","common","target","Container","Row","Col","md","onSubmit","CardGroup","Card","CardBody","InputGroup","xs","Button","color","disabled","Component"],"mappings":"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","file":"static/js/20.b282e78b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextFieldGroup = ({ field, value, label, error, type, onChange, checkUserExists, readOnly, placeholder }) => {\n  return (\n    <div className={classnames('form-group', { 'has-error': error })}>\n      <label className=\"control-label\">{label}</label>\n      <input\n        onChange={onChange}\n        onBlur={checkUserExists}\n        value={value}\n        type={type}\n        name={field}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        className=\"form-control\"\n      />\n    {error && <span className=\"help-block\">{error}</span>}\n    </div>  );\n}\n\nTextFieldGroup.propTypes = {\n  field: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  checkUserExists: PropTypes.func\n}\n\nTextFieldGroup.defaultProps = {\n  type: 'text'\n}\n\nexport default TextFieldGroup;\n","import React, { Component } from 'react';\nimport { Button, Card, CardBody, CardGroup, Col, Container, InputGroup, Row } from 'reactstrap';\nimport validateInput from '../../../shared/validations/login';\nimport TextFieldGroup from '../../common/TextFieldGroup';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      identifier: '',\n      password: '',\n      errors: {},\n      isLoading: false\n    }\n    localStorage.removeItem('auth');\n    if(this.props.location.pathname === '/logout') window.location.href = '#/login';\n  }\n  isValid() {\n    const {errors, isValid } = validateInput(this.state);\n\n    if(!isValid) {\n      this.setState({errors});\n    }\n    return isValid;\n  }\n  onSubmit(e) {\n    e.preventDefault();\n    if(this.isValid()) {\n      this.setState({ errors: {}, isLoading: true });\n      if (this.state.identifier === 'admin' && this.state.password ==='admin') {\n        localStorage.setItem('user', JSON.stringify({ username: this.state.identifier, password: this.state.password }));\n        localStorage.setItem('auth', 'abv');\n        this.props.history.push('/brand')\n      } else {\n        this.setState({ isLoading: false, errors: { common: 'Username or password is incorrect' } });\n      }\n    }\n  }\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  render() {\n    const {errors, identifier, password, isLoading} = this.state;\n    return (\n      <div className=\"app flex-row align-items-center mt-5\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md=\"4\">\n              <form onSubmit={e => this.onSubmit(e)}>\n                <CardGroup>\n                <Card className=\"p-4\">\n                  <CardBody>\n                    <h1>Login</h1>\n                    <span className=\"error\">{errors.common}</span>\n                    <InputGroup className=\"mb-3\">\n                      <TextFieldGroup\n                          field=\"identifier\"\n                          label=\"Username\"\n                          value={identifier}\n                          error={errors.identifier}\n                          onChange={e=>this.onChange(e)}\n                          />\n                    </InputGroup>\n                    <InputGroup className=\"mb-4\">\n                      <TextFieldGroup\n                          type=\"password\"\n                          field=\"password\"\n                          label=\"Password\"\n                          value={password}\n                          error={errors.password}\n                          onChange={e=>this.onChange(e)}\n                      />\n                    </InputGroup>\n                    <Row>\n                      <Col xs=\"6\">\n                        <Button color=\"primary\" className=\"px-4\" disabled={isLoading}>Login</Button>\n                      </Col>\n                    </Row>\n                  </CardBody>\n                </Card>\n              </CardGroup>\n              </form>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default Login;\n","import Validator from 'validator';\nimport isEmpty from 'lodash/isEmpty';\n\nexport default function validateinput(data) {\n    let errors = {};\n\n    if(Validator.isEmpty(data.identifier)) {\n        errors.identifier = 'Please enter username'\n    }\n\n    if(Validator.isEmpty(data.password)) {\n        errors.password = 'Please enter password'\n    }\n\n    return {\n        errors,\n        isValid: isEmpty(errors)\n    }\n}\n"],"sourceRoot":""}