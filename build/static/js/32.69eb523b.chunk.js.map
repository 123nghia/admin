{"version":3,"sources":["views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js","views/widgets/WidgetsDropdown.js"],"names":["ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","ChartBarSimple","barPercentage","categoryPercentage","company_id","JSON","parse","localStorage","getItem","WidgetsDropdown","React","useState","setData","useEffect","getData","ExportsFileExcel","a","baseUrlapi","Constants","BASE_URL","baseUrlCallApi","EXPORT_CUSTOMER_EVOUCHER","url","axios","get","params","then","res","console","log","document","getElementById","href","click","GET_OVERVIEW","val","modal","setModal","dataDetail","setDataDetail","length","map","item","index","sm","lg","style","padding","className","name","placement","onClick","viewDetail","disabled","text","value","Date","toLocaleDateString","Modal","size","isOpen","ModalHeader","ModalBody","ModalFooter","e"],"mappings":"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","file":"static/js/32.69eb523b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nconst ChartLineSimple = props => {\r\n\r\n  const {\r\n    borderColor,\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const pointHoverColor = (()=>{\r\n    if (pointHoverBackgroundColor) {\r\n      return pointHoverBackgroundColor\r\n    } else if (backgroundColor !== 'transparent') {\r\n      return backgroundColor\r\n    }\r\n    return borderColor\r\n  })()\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        borderColor: getColor(borderColor),\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointBackgroundColor: getColor(pointHoverColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverColor),\r\n        label\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const pointedOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            offset: true,\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent'\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent'\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, dataPoints) - 5,\r\n              max: Math.max.apply(Math, dataPoints) + 5\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 1\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const straightOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 2\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    const options = pointed ? pointedOptions : straightOptions\r\n      return Object.assign({}, options, {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: false\r\n        }\r\n      })\r\n  })()\r\n\r\n  const computedDatasets = (() => {\r\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\r\n  })()\r\n\r\n  // render\r\n\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={computedDatasets}\r\n      options={computedOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartLineSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  borderColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartLineSimple.defaultProps = {\r\n  borderColor: 'rgba(255,255,255,.55)',\r\n  backgroundColor: 'transparent',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartLineSimple\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor } from '@coreui/utils'\r\nimport { CChartBar } from '@coreui/react-chartjs'\r\n\r\nconst ChartBarSimple = props => {\r\n\r\n  const {\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\r\n        label: label,\r\n        barPercentage: 0.5,\r\n        categoryPercentage: 1\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    return {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      }\r\n    }\r\n  })()\r\n\r\n  // render\r\n  return (\r\n    <CChartBar\r\n      {...attributes}\r\n      datasets={defaultDatasets}\r\n      options={defaultOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartBarSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartBarSimple.defaultProps = {\r\n  backgroundColor: 'rgba(0,0,0,.2)',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartBarSimple\r\n","import React from \"react\";\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CWidgetDropdown,\r\n  CWidgetStatsB,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport ChartLineSimple from \"../charts/ChartLineSimple\";\r\nimport ChartBarSimple from \"../charts/ChartBarSimple\";\r\nimport { CButton } from \"@coreui/react\";\r\nimport { FaFileExport } from \"@react-icons/all-files/fa/FaFileExport\";\r\nimport Constants from \"../../contants/contants\";\r\nimport axios from \"axios\";\r\nimport { FaStreetView } from \"react-icons/fa\";\r\nimport { HiOutlineDotsVertical } from \"react-icons/hi\";\r\nimport { CChartBar, CChartLine } from \"@coreui/react-chartjs\";\r\nimport { cilArrowBottom, cilArrowTop, cilOptions } from \"@coreui/icons\";\r\nimport { GiChart } from \"react-icons/gi\";\r\nimport { ModalHeader, Modal, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { HiOutlineChartSquareBar } from 'react-icons/hi';\r\n\r\nconst listColor = [\r\n  {\r\n    color: \"gradient-primary\",\r\n  },\r\n  {\r\n    color: \"gradient-info\",\r\n  },\r\n  {\r\n    color: \"gradient-warning\",\r\n  },\r\n  {\r\n    color: \"gradient-danger\",\r\n  },\r\n];\r\nconst company_id = JSON.parse(localStorage.getItem(\"user\")).company_id\r\n  ? JSON.parse(localStorage.getItem(\"user\")).company_id\r\n  : \"-1\";\r\n\r\nconst WidgetsDropdown = () => {\r\n  const [data, setData] = React.useState([]);\r\n  React.useEffect(() => {\r\n    getData();\r\n  }, []);\r\n  const ExportsFileExcel = async () => {\r\n    var baseUrlapi = Constants.BASE_URL;\r\n    let baseUrlCallApi = Constants.EXPORT_CUSTOMER_EVOUCHER;\r\n    let url = baseUrlapi + baseUrlCallApi;\r\n    await axios\r\n      .get(url, {\r\n        params: {\r\n          company_id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        let a = document.getElementById(\"download_excel\");\r\n        if (a) {\r\n          a.href = `${baseUrlapi}${res.data.data.url}`;\r\n        }\r\n        a.click();\r\n      });\r\n  };\r\n  const viewDetail = (item) => {\r\n    setModal(true);\r\n    setDataDetail({...item});\r\n  };\r\n  const getData = async () => {\r\n    let baseUrlapi = Constants.BASE_URL;\r\n    let baseUrlCallApi = Constants.GET_OVERVIEW;\r\n    let url = baseUrlapi + baseUrlCallApi;\r\n    await axios.get(url,{\r\n      params : {\r\n        company_id\r\n      }\r\n    }).then(async (res) => {\r\n      let val = res.data.data;\r\n      setData(val);\r\n    });\r\n  };\r\n  const [modal, setModal] = React.useState(false);\r\n  const [dataDetail, setDataDetail] = React.useState([]);\r\n  // render\r\n  return (\r\n    <>\r\n      <CRow>\r\n        {data && data.length > 0\r\n          ? data.map((item, index) => {\r\n              return (\r\n                <CCol sm=\"6\" lg=\"4\" key={index} style={{ padding: \"15px\" }}>\r\n                  <div className=\"overview__border-widget\">\r\n                    <div className=\"flex-center-space\">\r\n                      <div className=\"overview__border-widget--icon\">\r\n                        <HiOutlineChartSquareBar />\r\n                      </div>\r\n                      <CDropdown>\r\n                        <CDropdownToggle color=\"transparent\">\r\n                          <HiOutlineDotsVertical\r\n                            style={{ color: \"#3c4b64\" }}\r\n                            name=\"cil-settings\"\r\n                          />\r\n                        </CDropdownToggle>\r\n                        <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n                          <CDropdownItem onClick={() => viewDetail(item)}>\r\n                            Xem chi tiết\r\n                          </CDropdownItem>\r\n                          <CDropdownItem onClick={ExportsFileExcel}>\r\n                            Xuất file\r\n                          </CDropdownItem>\r\n\r\n                          <CDropdownItem disabled>\r\n                            Disabled action\r\n                          </CDropdownItem>\r\n                        </CDropdownMenu>\r\n                      </CDropdown>\r\n                    </div>\r\n                    <h6>{item.text}</h6>\r\n                    <h4>{item.value}</h4>\r\n                    <div className=\"hr\"></div>\r\n                    <div className=\"overview__border-widget--footer\">\r\n                      {/* <p>{item.key}</p> */}\r\n                      <p>{new Date().toLocaleDateString()}</p>\r\n                    </div>\r\n                  </div>\r\n                </CCol>\r\n              );\r\n            })\r\n          : null}\r\n      </CRow>\r\n      <Modal size=\"md\" isOpen={modal}>\r\n        <ModalHeader>Chi tiết</ModalHeader>\r\n        <ModalBody className=\"info_voucher\">\r\n          {\r\n            dataDetail ? <div>\r\n              <p>\r\n              {dataDetail.text} : <span>{dataDetail.value}</span>\r\n              </p>\r\n            </div> : \"Chưa có thông tin\"\r\n          }\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <CButton color=\"secondary\" onClick={(e) => setModal(false)}>\r\n            Đóng\r\n          </CButton>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WidgetsDropdown;\r\n"],"sourceRoot":""}