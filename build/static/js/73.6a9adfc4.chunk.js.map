{"version":3,"sources":["views/charts/MainChartExample.js","views/DashBoard/ShopManager.js","views/DashBoard/SaleManager.js","views/DashBoard/Company.js","views/DashBoard/Admin.js","views/DashBoard/Dashboard.js"],"names":["getStyle","headers","Headers","auth","localStorage","getItem","append","Component","Company","props","state","company_name","company_slug","package_name","package_time","package_unit","array_feature","company_id","token","Authorization","isLoading","a","this","getCompanyData","getPackageData","axios","baseURL","Constants","BASE_URL","url","PLUGIN_DATA_COMPANY","method","data","JSON","parse","resCom","setState","Name","Slug","LIST_PLUGIN_ORDER_BY_ID","resPackage","val","result","arrTemp","arrCheckID","i","length","arrFeat","Array_Feature","y","includes","_id","push","className","css","override","size","color","loading","speedMultiplier","class","style","alignSelf","undefined","map","item","Type","lg","sm","xm","data-tip","Value","cursor","margin","href","target","styles","feature","height","width","borderRadius","src","Image","alignItems","fontSize","fontWeight","Key","display","flexDirection","justifyContent","textAlign","padding","border","background","Admin","window","location","Dashboard","type"],"mappings":"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","file":"static/js/73.6a9adfc4.chunk.js","sourcesContent":["import React from 'react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\n\nconst brandSuccess = getStyle('success') || '#4dbd74'\nconst brandInfo = getStyle('info') || '#20a8d8'\nconst brandDanger = getStyle('danger') || '#f86c6b'\n\nconst MainChartExample = attributes => {\n  const random = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  const defaultDatasets = (()=>{\n    let elements = 27\n    const data1 = []\n    const data2 = []\n    const data3 = []\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200))\n      data2.push(random(80, 100))\n      data3.push(65)\n    }\n    return [\n      {\n        label: 'My First dataset',\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: data1\n      },\n      {\n        label: 'My Second dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandSuccess,\n        pointHoverBackgroundColor: brandSuccess,\n        borderWidth: 2,\n        data: data2\n      },\n      {\n        label: 'My Third dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandDanger,\n        pointHoverBackgroundColor: brandDanger,\n        borderWidth: 1,\n        borderDash: [8, 5],\n        data: data3\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            gridLines: {\n              drawOnChartArea: false\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(250 / 5),\n              max: 250\n            },\n            gridLines: {\n              display: true\n            }\n          }]\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3\n          }\n        }\n      }\n    }\n  )()\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']}\n    />\n  )\n}\n\n\nexport default MainChartExample\n","import React, { lazy, Component } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CSelect, CCardGroup\n} from '@coreui/react'\n\nimport {\n  CChartBar,\n  CChartLine,\n  CChartDoughnut,\n  CChartRadar,\n  CChartPie,\n  CChartPolarArea\n} from '@coreui/react-chartjs'\n\nimport { DocsLink } from 'src/reusable'\n\nimport {\n  Button\n} from 'reactstrap';\nimport CIcon from '@coreui/icons-react'\nimport axios from 'axios'\nimport Constants from \"./../../contants/contants\";\nimport MainChartExample from '../charts/MainChartExample.js'\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\nclass ShopManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      month: 0,\n      dataUserSale: [],\n      arrPagination: [],\n      indexPage: 0,\n      dataStatistical: [],\n      arrPaginationStatistical: [],\n      indexPageStatistical: 0,\n      company_id: localStorage.getItem('user'),\n      dataApi: [],\n      arrTemp: [],\n      hidden: true,\n      hidden_all: true,\n      arrAllUser: []\n    };\n  }\n\n  async componentDidMount() {\n    await this.getCustomer();\n    await this.getCustomerByMonth(\"01\");\n    await this.getDataForCharts();\n\n  }\n\n  countType(arr, phone) {\n    const count = arr.filter(data => data.Phone == phone);\n    return count.length;\n  }\n\n  pagination(dataApi) {\n    var i, j, temparray, chunk = 5;\n    var arrTotal = [];\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\n      temparray = dataApi.slice(i, i + chunk);\n      arrTotal.push(temparray);\n    }\n    this.setState({ arrPagination: arrTotal, dataUserSale: arrTotal[this.state.indexPage] });\n  }\n\n  pagination_statistical(dataApi) {\n    var i, j, temparray, chunk = 5;\n    var arrTotal_Statistical = [];\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\n      temparray = dataApi.slice(i, i + chunk);\n      arrTotal_Statistical.push(temparray);\n    }\n    this.setState({ arrPaginationStatistical: arrTotal_Statistical, dataStatistical: arrTotal_Statistical[this.state.indexPageStatistical] });\n  }\n\n  async getCustomer() {\n\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_CUSTOMER,\n      method: 'POST',\n      data: {\n        \"condition\": {\n          \"Company_Id\": id.company_id\n        }\n      },\n      headers: this.state.token\n    });\n\n    this.setState({ dataApi: res.data.data });\n\n\n    //STATISTICAL\n    let arrCount_User_Company = [];\n    for (let i = 0; i < res.data.data.length; i++) {\n      //check if exits in arr\n      if (!arrCount_User_Company.some(item => res.data.data[i].Phone == item.Phone)) {\n        res.data.data[i].count = this.countType(res.data.data, res.data.data[i].Phone);\n        const resCal_Compay = await axios({\n          baseURL: Constants.BASE_URL,\n          url: Constants.CALCULATOR_ALL_USER_OF_COMPANY,\n          method: 'POST',\n          data: {\n            \"company_id\": id.company_id,\n            \"phone\": res.data.data[i].Phone\n          }\n        });\n        res.data.data[i].coefficient = resCal_Compay.data.data.calculator;\n        arrCount_User_Company.push(res.data.data[i])\n      }\n    }\n    if (arrCount_User_Company.length == 0) {\n      this.setState({ hidden: false })\n    } else {\n      this.setState({ hidden: true })\n    }\n    this.pagination(arrCount_User_Company);\n\n  }\n\n  async getDataForCharts() {\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n    let arrMonth = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n    let arrTemp = [];\n    for (let i = 0; i < arrMonth.length; i++) {\n      const res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.LIST_CUSTOMER_BY_MONTH,\n        method: 'POST',\n        data: {\n          company_id: id.company_id,\n          month: arrMonth[i]\n        }\n      });\n      arrTemp.push(res.data.data.length)\n    }\n    this.setState({ arrAllUser: arrTemp })\n  }\n\n  async getCustomerByMonth(month) {\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n    var bodyUser = {\n      company_id: id.company_id,\n      month: month\n    }\n\n    if (month == 0) {\n      await this.getCustomer();\n    } else {\n      const res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.LIST_CUSTOMER_BY_MONTH,\n        method: 'POST',\n        data: bodyUser\n      });\n\n      if (res.data.data.length == 0) {\n        this.setState({ hidden: false })\n      } else {\n        this.setState({ hidden: true })\n      }\n      this.setState({ dataApi: res.data.data, arrTemp: res.data.data });\n\n      //STATISTICAL\n      let arrCount_User = [];\n      for (let i = 0; i < this.state.arrTemp.length; i++) {\n        //check if exits in arr\n        if (!arrCount_User.some(item => this.state.arrTemp[i].Phone == item.Phone)) {\n          this.state.arrTemp[i].count = this.countType(this.state.arrTemp, this.state.arrTemp[i].Phone);\n          const resCal = await axios({\n            baseURL: Constants.BASE_URL,\n            url: Constants.GET_COEFFICIENT,\n            method: 'POST',\n            data: {\n              \"month\": month,\n              \"company_id\": id.company_id,\n              \"phone\": this.state.arrTemp[i].Phone\n            }\n          });\n          this.state.arrTemp[i].coefficient = resCal.data.data.calculator;\n          arrCount_User.push(this.state.arrTemp[i])\n        }\n      }\n\n      this.pagination_statistical(arrCount_User);\n    }\n  }\n\n  render() {\n    const { dataUserSale, hidden, arrPagination, indexPage, hidden_all,\n      dataStatistical, arrPaginationStatistical, indexPageStatistical } = this.state;\n    return (\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              <CFormGroup row>\n                <CCol md=\"3\">\n                  <CLabel htmlFor=\"selectSm\">Thống kê tổng số lượt user</CLabel>\n                </CCol>\n                <CCol xs=\"12\" md=\"9\">\n                  {/*  */}\n                </CCol>\n              </CFormGroup>\n            </CCardHeader>\n            <CCardBody>\n              <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">No.</th>\n                    <th className=\"text-center\">Name</th>\n                    <th className=\"text-center\">Email</th>\n                    <th className=\"text-center\">Phone</th>\n                    <th className=\"text-center\">Gender</th>\n                    <th className=\"text-center\">Time Visits</th>\n                    <th className=\"text-center\">Coefficient</th>\n                    <th className=\"text-center\">Last Times Visit</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <td colSpan=\"9\" hidden={hidden_all} className=\"text-center\">No users in this month</td>\n                  {\n                    dataUserSale != undefined ?\n                      dataUserSale.map((item, i) => {\n                        return (\n                          <tr key={i}>\n                            <td className=\"text-center\">{i + 1}</td>\n                            <td className=\"text-center\">{item.Name}</td>\n                            <td className=\"text-center\">{item.Email}</td>\n                            <td className=\"text-center\">{item.Phone}</td>\n                            <td className=\"text-center\">{item.Gender}</td>\n                            <td className=\"text-center\">{item.count}</td>\n                            <td className=\"text-center\">{item.coefficient}</td>\n                            <td className=\"text-center\">\n                              {(new Date(item.Create_Date)).toLocaleDateString() + ' ' + (new Date(item.Create_Date)).toLocaleTimeString()}\n                            </td>\n                          </tr>\n                        );\n                      }) : \"\"\n                  }\n                </tbody>\n              </table>\n              {\n                arrPagination.length == 1 ? \"\" :\n                  <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                    <tr style={{ float: \"left\", width: \"100%\" }}>\n                      {\n                        arrPagination.map((item, i) => {\n                          return (\n                            <td>\n                              <Button style={{ marginRight: '5px' }} color={i == indexPage ? 'primary' : 'danger'} onClick={e => { this.setState({ dataUserSale: arrPagination[i], indexPage: i }) }}>{i + 1}</Button>\n                            </td>\n                          );\n                        })\n                      }\n                    </tr>\n                  </div>\n              }\n              <br />\n\n              <CCardGroup rows className=\"cols-2\">\n                <CCard backgroundColor=\"red\">\n                  <CCardHeader>\n                    Bar Chart\n                  </CCardHeader>\n                  <CCardBody>\n                    <CChartBar\n                      datasets={[\n                        {\n                          label: 'Total user of month ',\n                          backgroundColor: '#f87979',\n                          data: this.state.arrAllUser\n                        }\n                      ]}\n                      labels=\"months\"\n                      options={{\n                        tooltips: {\n                          enabled: true\n                        }\n                      }}\n                    />\n                  </CCardBody>\n                </CCard>\n                <CCard>\n                  <CCardHeader>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"selectSm\">USER ON MONTH</CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <div style={{ float: \"right\", width: \"250px\" }}>\n                          <CSelect onChange={async e => { await this.getCustomerByMonth(e.target.value) }} custom size=\"sm\" name=\"selectSm\" id=\"SelectLm\">\n                            <option value=\"01\">01</option>\n                            <option value=\"02\">02</option>\n                            <option value=\"03\">03</option>\n                            <option value=\"04\">04</option>\n                            <option value=\"05\">05</option>\n                            <option value=\"06\">06</option>\n                            <option value=\"07\">07</option>\n                            <option value=\"08\">08</option>\n                            <option value=\"09\">09</option>\n                            <option value=\"10\">10</option>\n                            <option value=\"11\">11</option>\n                            <option value=\"12\">12</option>\n                          </CSelect>\n                        </div>\n                      </CCol>\n                    </CFormGroup>\n                  </CCardHeader>\n                  <CCardBody>\n                    <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                      <thead className=\"thead-light\">\n                        <tr>\n                          <th className=\"text-center\">Name</th>\n                          <th className=\"text-center\">Email</th>\n                          <th className=\"text-center\">Phone</th>\n                          <th className=\"text-center\">Gender</th>\n                          <th className=\"text-center\">Times Count</th>\n                          <th className=\"text-center\">Coefficient</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <td colSpan=\"7\" hidden={hidden} className=\"text-center\">No users in this month</td>\n                        {\n                          dataStatistical != undefined ?\n                            dataStatistical.map((item, i) => {\n                              return (\n                                <tr key={i}>\n                                  <td className=\"text-center\">{item.Name}</td>\n                                  <td className=\"text-center\">{item.Email}</td>\n                                  <td className=\"text-center\">{item.Phone}</td>\n                                  <td className=\"text-center\">{item.Gender}</td>\n                                  <td className=\"text-center\">{item.count}</td>\n                                  <td className=\"text-center\">{item.coefficient}</td>\n                                </tr>\n                              );\n                            }) : \"\"\n                        }\n                      </tbody>\n                    </table>\n\n                    {\n                      arrPaginationStatistical.length == 1 ? \"\" :\n                        <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                          <tr style={{ float: \"left\", width: \"100%\" }}>\n                            {\n                              arrPaginationStatistical.map((item, i) => {\n                                return (\n                                  <td>\n                                    <Button style={{ marginRight: '5px' }} color={i == indexPageStatistical ? 'primary' : 'danger'} onClick={e => { this.setState({ dataStatistical: arrPaginationStatistical[i], indexPageStatistical: i }) }}>{i + 1}</Button>\n                                  </td>\n                                );\n                              })\n                            }\n                          </tr>\n                        </div>\n                    }\n                  </CCardBody>\n                </CCard>\n\n              </CCardGroup>\n            </CCardBody>\n          </CCard>\n\n\n\n\n        </CCol>\n      </CRow>\n\n    )\n  }\n}\n\nexport default ShopManager\n","import React, { lazy, Component } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CSelect, CCardGroup\n} from '@coreui/react'\n\nimport {\n  CChartBar,\n  CChartLine,\n  CChartDoughnut,\n  CChartRadar,\n  CChartPie,\n  CChartPolarArea\n} from '@coreui/react-chartjs'\n\nimport { DocsLink } from 'src/reusable'\n\nimport {\n  Button\n} from 'reactstrap';\nimport CIcon from '@coreui/icons-react'\nimport axios from 'axios'\nimport Constants from \"./../../contants/contants\";\nimport MainChartExample from '../charts/MainChartExample.js'\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\nclass ShopManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      month: 0,\n      dataUserSale: [],\n      arrPagination: [],\n      indexPage: 0,\n      dataStatistical: [],\n      arrPaginationStatistical: [],\n      indexPageStatistical: 0,\n      company_id: localStorage.getItem('user'),\n      dataApi: [],\n      arrTemp: [],\n      hidden: true,\n      hidden_all: true,\n      arrAllUser: []\n    };\n  }\n\n  async componentDidMount() {\n    await this.getCustomer();\n    await this.getCustomerByMonth(\"01\");\n    await this.getDataForCharts();\n\n  }\n\n  countType(arr, phone) {\n    const count = arr.filter(data => data.Phone == phone);\n    return count.length;\n  }\n\n  pagination(dataApi) {\n    var i, j, temparray, chunk = 5;\n    var arrTotal = [];\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\n      temparray = dataApi.slice(i, i + chunk);\n      arrTotal.push(temparray);\n    }\n    this.setState({ arrPagination: arrTotal, dataUserSale: arrTotal[this.state.indexPage] });\n  }\n\n  pagination_statistical(dataApi) {\n    var i, j, temparray, chunk = 5;\n    var arrTotal_Statistical = [];\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\n      temparray = dataApi.slice(i, i + chunk);\n      arrTotal_Statistical.push(temparray);\n    }\n    this.setState({ arrPaginationStatistical: arrTotal_Statistical, dataStatistical: arrTotal_Statistical[this.state.indexPageStatistical] });\n  }\n\n  async getCustomer() {\n\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_CUSTOMER,\n      method: 'POST',\n      data: {\n        \"condition\": {\n          \"Company_Id\": id.company_id,\n          \"Sale_Id\": id.sale_id\n        }\n      },\n      headers: this.state.token\n    });\n\n    this.setState({ dataApi: res.data.data });\n\n\n    //STATISTICAL\n    let arrCount_User_Company = [];\n    for (let i = 0; i < res.data.data.length; i++) {\n      //check if exits in arr\n      if (!arrCount_User_Company.some(item => res.data.data[i].Phone == item.Phone)) {\n        res.data.data[i].count = this.countType(res.data.data, res.data.data[i].Phone);\n        const resCal_Compay = await axios({\n          baseURL: Constants.BASE_URL,\n          url: Constants.CALCULATOR_ALL_USER_OF_SALE,\n          method: 'POST',\n          data: {\n            \"company_id\": id.company_id,\n            \"phone\": res.data.data[i].Phone,\n            \"sale_id\": id.sale_id\n          }\n        });\n        res.data.data[i].coefficient = resCal_Compay.data.data.calculator;\n        arrCount_User_Company.push(res.data.data[i])\n      }\n    }\n    if (arrCount_User_Company.length == 0) {\n      this.setState({ hidden: false })\n    } else {\n      this.setState({ hidden: true })\n    }\n    this.pagination(arrCount_User_Company);\n\n  }\n\n  async getDataForCharts() {\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n    let arrMonth = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n    let arrTemp = [];\n    for (let i = 0; i < arrMonth.length; i++) {\n      const res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.GET_USER_SALE_BY_MONTH,\n        method: 'POST',\n        data: {\n          company_id: id.company_id,\n          month: arrMonth[i],\n          sale_id: id.sale_id\n        }\n      });\n      arrTemp.push(res.data.data.length)\n    }\n\n    this.setState({ arrAllUser: arrTemp })\n  }\n\n  async getCustomerByMonth(month) {\n    const { company_id } = this.state;\n    var id = JSON.parse(company_id);\n    var bodyUser = {\n      company_id: id.company_id,\n      month: month,\n      sale_id: id.sale_id\n    }\n\n    if (month == 0) {\n      await this.getCustomer();\n    } else {\n      const res = await axios({\n        baseURL: Constants.BASE_URL,\n        url: Constants.GET_USER_SALE_BY_MONTH,\n        method: 'POST',\n        data: bodyUser\n      });\n\n      if (res.data.data.length == 0) {\n        this.setState({ hidden: false })\n      } else {\n        this.setState({ hidden: true })\n      }\n      this.setState({ dataApi: res.data.data, arrTemp: res.data.data });\n\n      //STATISTICAL\n      let arrCount_User = [];\n      for (let i = 0; i < this.state.arrTemp.length; i++) {\n        //check if exits in arr\n        if (!arrCount_User.some(item => this.state.arrTemp[i].Phone == item.Phone)) {\n          this.state.arrTemp[i].count = this.countType(this.state.arrTemp, this.state.arrTemp[i].Phone);\n          const resCal = await axios({\n            baseURL: Constants.BASE_URL,\n            url: Constants.GET_COEFFICIENT_PER_SALE,\n            method: 'POST',\n            data: {\n              \"month\": month,\n              \"company_id\": id.company_id,\n              \"phone\": this.state.arrTemp[i].Phone,\n              \"sale_id\": id.sale_id\n            }\n          });\n          this.state.arrTemp[i].coefficient = resCal.data.data.calculator;\n          arrCount_User.push(this.state.arrTemp[i])\n        }\n      }\n\n      this.pagination_statistical(arrCount_User);\n    }\n  }\n\n  render() {\n    const { dataUserSale, hidden, arrPagination, indexPage, hidden_all,\n      dataStatistical, arrPaginationStatistical, indexPageStatistical } = this.state;\n    return (\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              <CFormGroup row>\n                <CCol md=\"3\">\n                  <CLabel htmlFor=\"selectSm\">Thống kê tổng số lượt user</CLabel>\n                </CCol>\n                <CCol xs=\"12\" md=\"9\">\n                  {/*  */}\n                </CCol>\n              </CFormGroup>\n            </CCardHeader>\n            <CCardBody>\n              <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th className=\"text-center\">No.</th>\n                    <th className=\"text-center\">Name</th>\n                    <th className=\"text-center\">Email</th>\n                    <th className=\"text-center\">Phone</th>\n                    <th className=\"text-center\">Gender</th>\n                    <th className=\"text-center\">Time Visits</th>\n                    <th className=\"text-center\">Coefficient</th>\n                    <th className=\"text-center\">Last Times Visit</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <td colSpan=\"9\" hidden={hidden_all} className=\"text-center\">No users in this month</td>\n                  {\n                    dataUserSale != undefined ?\n                      dataUserSale.map((item, i) => {\n                        return (\n                          <tr key={i}>\n                            <td className=\"text-center\">{i + 1}</td>\n                            <td className=\"text-center\">{item.Name}</td>\n                            <td className=\"text-center\">{item.Email}</td>\n                            <td className=\"text-center\">{item.Phone}</td>\n                            <td className=\"text-center\">{item.Gender}</td>\n                            <td className=\"text-center\">{item.count}</td>\n                            <td className=\"text-center\">{item.coefficient}</td>\n                            <td className=\"text-center\">\n                              {(new Date(item.Create_Date)).toLocaleDateString() + ' ' + (new Date(item.Create_Date)).toLocaleTimeString()}\n                            </td>\n                          </tr>\n                        );\n                      }) : \"\"\n                  }\n                </tbody>\n              </table>\n              {\n                arrPagination.length == 1 ? \"\" :\n                  <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                    <tr style={{ float: \"left\", width: \"100%\" }}>\n                      {\n                        arrPagination.map((item, i) => {\n                          return (\n                            <td>\n                              <Button style={{ marginRight: '5px' }} color={i == indexPage ? 'primary' : 'danger'} onClick={e => { this.setState({ dataUserSale: arrPagination[i], indexPage: i }) }}>{i + 1}</Button>\n                            </td>\n                          );\n                        })\n                      }\n                    </tr>\n                  </div>\n              }\n              <br />\n\n              <CCardGroup rows className=\"cols-2\">\n                <CCard backgroundColor=\"red\">\n                  <CCardHeader>\n                    Bar Chart\n                  </CCardHeader>\n                  <CCardBody>\n                    <CChartBar\n                      datasets={[\n                        {\n                          label: 'Total user of month ',\n                          backgroundColor: '#f87979',\n                          data: this.state.arrAllUser\n                        }\n                      ]}\n                      labels=\"months\"\n                      options={{\n                        tooltips: {\n                          enabled: true\n                        }\n                      }}\n                    />\n                  </CCardBody>\n                </CCard>\n                <CCard>\n                  <CCardHeader>\n                    <CFormGroup row>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor=\"selectSm\">USER ON MONTH</CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <div style={{ float: \"right\", width: \"250px\" }}>\n                          <CSelect onChange={async e => { await this.getCustomerByMonth(e.target.value) }} custom size=\"sm\" name=\"selectSm\" id=\"SelectLm\">\n                            <option value=\"01\">01</option>\n                            <option value=\"02\">02</option>\n                            <option value=\"03\">03</option>\n                            <option value=\"04\">04</option>\n                            <option value=\"05\">05</option>\n                            <option value=\"06\">06</option>\n                            <option value=\"07\">07</option>\n                            <option value=\"08\">08</option>\n                            <option value=\"09\">09</option>\n                            <option value=\"10\">10</option>\n                            <option value=\"11\">11</option>\n                            <option value=\"12\">12</option>\n                          </CSelect>\n                        </div>\n                      </CCol>\n                    </CFormGroup>\n                  </CCardHeader>\n                  <CCardBody>\n                    <table className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                      <thead className=\"thead-light\">\n                        <tr>\n                          <th className=\"text-center\">Name</th>\n                          <th className=\"text-center\">Email</th>\n                          <th className=\"text-center\">Phone</th>\n                          <th className=\"text-center\">Gender</th>\n                          <th className=\"text-center\">Times Count</th>\n                          <th className=\"text-center\">Coefficient</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <td colSpan=\"7\" hidden={hidden} className=\"text-center\">No users in this month</td>\n                        {\n                          dataStatistical != undefined ?\n                            dataStatistical.map((item, i) => {\n                              return (\n                                <tr key={i}>\n                                  <td className=\"text-center\">{item.Name}</td>\n                                  <td className=\"text-center\">{item.Email}</td>\n                                  <td className=\"text-center\">{item.Phone}</td>\n                                  <td className=\"text-center\">{item.Gender}</td>\n                                  <td className=\"text-center\">{item.count}</td>\n                                  <td className=\"text-center\">{item.coefficient}</td>\n                                </tr>\n                              );\n                            }) : \"\"\n                        }\n                      </tbody>\n                    </table>\n\n                    {\n                      arrPaginationStatistical.length == 1 ? \"\" :\n                        <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\n                          <tr style={{ float: \"left\", width: \"100%\" }}>\n                            {\n                              arrPaginationStatistical.map((item, i) => {\n                                return (\n                                  <td>\n                                    <Button style={{ marginRight: '5px' }} color={i == indexPageStatistical ? 'primary' : 'danger'} onClick={e => { this.setState({ dataStatistical: arrPaginationStatistical[i], indexPageStatistical: i }) }}>{i + 1}</Button>\n                                  </td>\n                                );\n                              })\n                            }\n                          </tr>\n                        </div>\n                    }\n                  </CCardBody>\n                </CCard>\n\n              </CCardGroup>\n            </CCardBody>\n          </CCard>\n\n\n\n\n        </CCol>\n      </CRow>\n\n    )\n  }\n}\n\nexport default ShopManager\n","import React, { lazy, Component } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CSelect, CCardGroup\n} from '@coreui/react'\n\nimport {\n  CChartBar,\n  CChartLine,\n  CChartDoughnut,\n  CChartRadar,\n  CChartPie,\n  CChartPolarArea\n} from '@coreui/react-chartjs'\n\nimport { DocsLink } from 'src/reusable'\n\nimport {\n  Button\n} from 'reactstrap';\nimport CIcon from '@coreui/icons-react'\nimport axios from 'axios'\nimport Constants from \"./../../contants/contants\";\nimport MainChartExample from '../charts/MainChartExample.js'\nimport { Nav, NavItem, NavLink } from 'reactstrap';\nimport ReactTooltip from 'react-tooltip';\nimport { css } from \"@emotion/react\";\nimport DotLoader from \"react-spinners/DotLoader\";\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\n\nclass Company extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      company_name: '',\n      company_slug: '',\n      package_name: '',\n      package_time: '',\n      package_unit: '',\n      array_feature: [],\n      company_id: localStorage.getItem('user'),\n      token: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      isLoading: false\n    };\n  }\n\n  async componentWillMount() {\n    await this.getCompanyData();\n    await this.getPackageData();\n  }\n\n  async getCompanyData() {\n\n    const resCom = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.PLUGIN_DATA_COMPANY,\n      method: 'POST',\n      data: {\n        company_id: JSON.parse(this.state.company_id).company_id\n      }\n    });\n\n    this.setState({ company_name: resCom.data.data.Name, company_slug: resCom.data.data.Slug, })\n  }\n\n  async getPackageData() {\n    this.setState({ isLoading: true })\n    const resPackage = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_PLUGIN_ORDER_BY_ID,\n      method: 'POST',\n      headers: this.state.token\n    });\n    let val = resPackage.data.data.result;\n    let arrTemp = [];\n    let arrCheckID = [];\n    for (let i = 0; i < val.length; i++) {\n      let arrFeat = val[i].Array_Feature;\n      for (let y = 0; y < arrFeat.length; y++) {\n        if (arrCheckID.includes(arrFeat[y]._id) == false) {\n          arrTemp.push(arrFeat[y]);\n        }\n        arrCheckID.push(arrFeat[y]._id)\n      }\n    }\n\n    this.setState({ array_feature: val.length > 0 ? arrTemp : [], isLoading: false })\n    // return resPackage.data.data.Name;\n  }\n\n  render() {\n    const { array_feature, company_slug } = this.state;\n    if (!this.state.isLoading) {\n      return (\n        <div className=\"container\">\n          <div class=\"title\" className=\"h3\" style={{ alignSelf: 'center' }}>\n            Danh sách quản lý các tính năng Admin\n          </div>\n          <CRow>\n            {\n              array_feature != undefined ?\n                array_feature.map((item, i) => {\n                  if (item.Type == \"0\") {\n                    return (\n                      <CCol lg=\"3\" sm=\"12\" xm=\"12\">\n                        <a data-tip={`${item.Value + company_slug}`} style={{ cursor: \"pointer\", margin: 5 }} href={item.Value + \"#\" + \"/\" + company_slug} target=\"_blank\">\n                          <div style={styles.feature}>\n                            <div style={{ height: '200px', width: '100%', 'marginTop': '24px' }}>\n                              <img width=\"50\" height=\"50\" style={{ borderRadius: 50 }} src={item.Image} />\n                            </div>\n                            <div className=\"feature__body\">\n                              <center>\n                                <div style={{ width: '80%', height: 50, alignItems: 'center', fontSize: 17, fontWeight: 'bold' }}>{item.Key}</div>\n\n                                <div style={{ width: '80', height: 70, fontSize: 12 }}>\n                                  Nhấp vào đây để chuyển hướng đến {item.Value + company_slug}\n                                </div>\n                              </center>\n                            </div>\n                          </div>\n                        </a>\n                        <ReactTooltip />\n                      </CCol>\n                    );\n                  }\n                }) : \"\"\n            }\n          </CRow>\n          {\n            array_feature == undefined || array_feature.length == 0 ?\n              <div>Bạn chưa có bất kì tính năng nào !!! Vui lòng liên hệ admin !!!</div> : \"\"\n          }\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"sweet-loading\">\n        <DotLoader css={override} size={50} color={\"#123abc\"} loading={this.state.isLoading} speedMultiplier={1.5} />\n      </div>\n    );\n  }\n}\n\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst styles = {\n  feature: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    width: '85%',\n    height: 280,\n    color: '#fff',\n    padding: '10px',\n    border: '1px',\n    background: '#FF4F23',\n    borderRadius: '10px',\n    borderRadius: '10px'\n\n  }\n}\n\nexport default Company\n","import React, { lazy, Component } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CSelect, CCardGroup\n} from '@coreui/react'\n\nimport {\n  CChartBar,\n  CChartLine,\n  CChartDoughnut,\n  CChartRadar,\n  CChartPie,\n  CChartPolarArea\n} from '@coreui/react-chartjs'\n\nimport { DocsLink } from 'src/reusable'\n\nimport {\n  Button\n} from 'reactstrap';\nimport CIcon from '@coreui/icons-react'\nimport axios from 'axios'\nimport Constants from \"./../../contants/contants\";\nimport MainChartExample from '../charts/MainChartExample.js'\nimport md5 from 'md5'\nimport { Nav, NavItem, NavLink } from 'reactstrap';\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nconst user = localStorage.getItem('user');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      company_name: '',\n      company_slug: '',\n      package_name: '',\n      package_time: '',\n      package_unit: '',\n      array_feature: []\n    };\n  }\n\n  async componentDidMount() {\n    window.location.href = '#/list_order'\n  }\n\n  render() {\n    const { array_feature, company_slug } = this.state;\n\n    return (\n      <div>\n\n      </div>\n    )\n  }\n}\n\nconst styles = {\n  feature: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    width: '100%',\n    height: 280,\n    color: '#fff',\n    padding: '10px',\n    background: '#123254',\n    borderRadius: '10px',\n    borderRadius: '10px'\n\n  }\n}\n\nexport default Admin\n","import React, { lazy, Component } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CSelect\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport axios from 'axios'\nimport Constants from \"./../../contants/contants\";\nimport MainChartExample from '../charts/MainChartExample.js'\nimport ShopManager from './ShopManager'\nimport SaleManager from './SaleManager'\nimport Company from './Company'\nimport Admin from './Admin'\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: localStorage.getItem('type')\n    };\n  }\n  render() {\n    return (\n      <div>\n        {\n          this.state.type == '0' || this.state.type == '1' ? <Admin /> : <Company />\n        }\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n"],"sourceRoot":""}