{"version":3,"sources":["views/components/Iframe.js","views/base/tables/AI_Skin/HistorySkin.js"],"names":["Iframe","toggleView","link","closeModal","show","size","closeButton","url","width","height","display","position","color","onClick","defaultProps","headers","Headers","auth","localStorage","getItem","append","HistorySkin","props","getData","a","state","activePage","itemPerPage","setState","isLoading","axios","baseURL","Constants","BASE_URL","LIST_HISTORY_SKIN","data","page","limit","method","res","dataApi","itemsCount","total","handlePageChange","pageNumber","type","console","log","getData_ByCondition","LIST_HISTORY_SKIN_BY_CONDITION","token","active","map","val","Status","totalActive","key","numPage","hidden","indexPage","Authorization","toggleHistory","idHistory","bind","this","arr","JSON","parse","i","length","window","location","hash","isHidden","href","d","UserName","toLocaleUpperCase","includes","push","e","target","name","value","status","className","css","override","loading","speedMultiplier","Row","Col","Card","CardHeader","CardBody","ble","colSpan","undefined","item","src","Result","facedata","image_info","style","outline","_id","Company_Id","Name","Sale_Id","Date","Create_Date","toLocaleDateString","toLocaleTimeString","float","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","itemClass","linkClass","BASE_URL_HISTORY_SKIN","Component"],"mappings":"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","file":"static/js/75.f6490d73.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Iframes from 'react-iframe'\n\nimport {\n  CButton,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n} from '@coreui/react'\n\nfunction Iframe({ toggleView, link, closeModal }) {\n\n  const handleClose = () => {\n    if (closeModal) {\n      closeModal();\n    }\n  }\n\n  return (\n    <CModal\n      show={toggleView}\n      size=\"xl\"\n    >\n      <CModalHeader closeButton>\n        <CModalTitle>Chi tiết soi da</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <Iframes url={link}\n          width=\"100%\"\n          height=\"500px\"\n          display=\"initial\"\n          position=\"relative\" />\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={() => { handleClose() }}>Đóng</CButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nIframe.propTypes = {\n  link: PropTypes.string,\n  toggleView: PropTypes.bool\n}\n\nIframe.defaultProps = {\n  link: \"\",\n  toggleView: false\n};\n\nexport default Iframe\n\n","import React, { Component } from 'react';\nimport CIcon from '@coreui/icons-react'\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Row,\n} from 'reactstrap';\n\nimport {\n  CButton\n} from '@coreui/react'\n\nimport IframeModal from '../../../components/Iframe';\nimport Pagination from \"react-js-pagination\";\nimport 'moment-timezone';\nimport Constants from \"../../../../contants/contants\";\nimport axios from 'axios'\nimport { css } from \"@emotion/react\";\nimport DotLoader from \"react-spinners/DotLoader\";\n\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\nclass HistorySkin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      key: '',\n      page: 1,\n      limit: 20,\n      totalActive: 0,\n      activePage: 1,\n      numPage: 1,\n      itemsCount: 0,\n      itemPerPage: 5,\n      hidden: false,\n      indexPage: 0,\n      token: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      isLoading: false,\n      type: localStorage.getItem('type'),\n      toggleHistory: false,\n      idHistory: \"\"\n    };\n    this.closeModal = this.closeModal.bind(this)\n  }\n  async componentDidMount() {\n    if (this.state.type == '0') {\n      this.getData()\n    } else {\n      this.getData_ByCondition()\n    }\n\n    let arr = JSON.parse(localStorage.getItem('url'));\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].url == window.location.hash) {\n        if (arr[i].isHidden == true) {\n          window.location.href = '#/'\n        }\n      }\n    }\n  }\n\n  getData = async () => {\n    const { activePage, itemPerPage } = this.state;\n    this.setState({ isLoading: true });\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_HISTORY_SKIN,\n      data: {\n        page: activePage,\n        limit: itemPerPage\n      },\n      method: 'POST'\n    });\n\n    let data = res.data.data;\n\n    this.setState({ dataApi: data.data, data: data.data, isLoading: false, itemsCount: data.total });\n  }\n\n  handlePageChange = async (pageNumber) => {\n    const { type } = this.state;\n    console.log(type)\n    this.setState({ activePage: pageNumber }, () => {\n      if (type == '0' || type == '1') {\n        this.getData()\n      } else {\n        this.getData_ByCondition()\n      }\n    });\n  };\n\n  getData_ByCondition = async () => {\n    const { activePage, itemPerPage } = this.state;\n    this.setState({ isLoading: true });\n    const res = await axios({\n      baseURL: Constants.BASE_URL,\n      url: Constants.LIST_HISTORY_SKIN_BY_CONDITION,\n      method: 'POST',\n      data: {\n        page: activePage,\n        limit: itemPerPage\n      },\n      headers: this.state.token\n    });\n\n    let data = res.data.data\n    this.setState({ dataApi: data.data, data: data.data });\n\n    let active = 0\n\n    data.data.map(val => {\n      if (val.Status == \"Actived\") {\n        active = active + 1\n      }\n    })\n\n    this.setState({ isLoading: false, totalActive: active, itemsCount: data.total });\n  }\n\n  searchKey(key) {\n    this.setState({ key: key })\n\n    if (key != '') {\n      let d = []\n      this.state.dataApi.map(val => {\n        if (val.UserName.toLocaleUpperCase().includes(key.toLocaleUpperCase())) {\n          d.push(val)\n        }\n      })\n      let active = 0\n\n      d.map(val => {\n        if (val.Status == \"Actived\") {\n          active = active + 1\n        }\n      })\n\n      this.setState({ data: d, totalActive: active })\n    } else {\n      let active = 0\n\n      this.state.dataApi.map(val => {\n        if (val.Status == \"Actived\") {\n          active = active + 1\n        }\n      })\n\n      this.setState({ data: this.state.dataApi, totalActive: active })\n    }\n  }\n\n  onChange(key, val) {\n    this.setState({ [key]: val })\n  }\n\n  inputChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  closeModal() {\n    const { toggleHistory } = this.state;\n    this.setState({ toggleHistory: !toggleHistory });\n  }\n\n  getBadge(status) {\n    switch (status) {\n      case 'Actived': return 'success'\n      case 'Inactive': return 'secondary'\n      case 'Locked': return 'warning'\n      case 'Deactived': return 'danger'\n      default: return 'primary'\n    }\n  }\n\n  render() {\n    const { data, activePage, itemPerPage, itemsCount, toggleHistory, idHistory } = this.state;\n\n    if (!this.state.isLoading) {\n      return (\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <Card>\n                <CardHeader>\n                  <i className=\"fa fa-align-justify\"></i> Lịch sử soi da\n                </CardHeader>\n                <CardBody>\n                  <table ble className=\"table table-hover table-outline mb-0 d-none d-sm-table\">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th className=\"text-center\">STT.</th>\n                        <th className=\"text-center\">Tên</th>\n                        <th className=\"text-center\">Hình ảnh</th>\n                        <th className=\"text-center\">Kết quả</th>\n                        <th className=\"text-center\">Công ty</th>\n                        <th className=\"text-center\">Sale</th>\n                        <th className=\"text-center\">Ngày tạo</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <td colSpan=\"10\" hidden={data.length > 0 ? true : false} className=\"text-center\">Không tìm thấy dữ liệu</td>\n                      {\n                        data != undefined ?\n                          data.map((item, i) => {\n                            return (\n                              <tr key={i}>\n                                <td className=\"text-center\">{i + 1}</td>\n                                <td className=\"text-center\">{item.UserName}</td>\n                                <td className=\"text-center\">\n                                  <img src={item.Result != undefined ? JSON.parse(item.Result).data.facedata.image_info.url : \"\"} style={{ width: '50%', height: 50 }} />\n                                </td>\n                                <td className=\"text-center\">\n                                  <CButton outline color=\"primary\" onClick={e => {\n                                    this.setState({\n                                      idHistory: item._id,\n                                      toggleHistory: !toggleHistory\n                                    })\n                                  }}><CIcon name=\"cil-magnifying-glass\" /> Xem chi tiết</CButton>\n                                </td>\n                                <td className=\"text-center\">{item.Company_Id == \"\" || item.Company_Id == undefined ? \"\" : item.Company_Id.Name}</td>\n                                <td className=\"text-center\">{item.Sale_Id == null ? \"ADMIN\" : item.Sale_Id.Name}</td>\n                                <td className=\"text-center\">\n                                  {(new Date(item.Create_Date)).toLocaleDateString() + ' ' + (new Date(item.Create_Date)).toLocaleTimeString()}\n                                </td>\n                              </tr>\n                            );\n                          }) : \"\"\n                      }\n                    </tbody>\n                  </table>\n                </CardBody>\n              </Card>\n\n              <div style={{ float: 'right' }}>\n                <Pagination\n                  activePage={activePage}\n                  itemsCountPerPage={itemPerPage}\n                  totalItemsCount={itemsCount}\n                  pageRangeDisplayed={10}\n                  onChange={(e) => {\n                    this.handlePageChange(e)\n                  }}\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                />\n              </div>\n            </Col>\n          </Row>\n\n          <IframeModal toggleView={toggleHistory} link={Constants.BASE_URL_HISTORY_SKIN + idHistory} closeModal={this.closeModal} />\n        </div>\n      );\n    }\n    return (\n      <div className=\"sweet-loading\">\n        <DotLoader css={override} size={50} color={\"#123abc\"} loading={this.state.isLoading} speedMultiplier={1.5} />\n      </div>\n    );\n  }\n}\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nexport default HistorySkin;\n"],"sourceRoot":""}