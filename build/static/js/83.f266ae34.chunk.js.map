{"version":3,"sources":["views/base/tables/KeyOrder.js","views/Common/TextFieldGroup.js"],"names":["headers","Headers","auth","localStorage","getItem","append","Users","props","getData","a","setState","isLoading","axios","baseURL","Constants","BASE_URL","url","LIST_KEYORDER","method","res","pagination","data","dataApi","active","map","val","Status","totalActive","openDelete","item","modalDelete","state","delete","key","activePage","page","itemsCount","limit","modalCom","viewingUser","communities","updated","action","UserName","Email","Company_Id","Address","Phone","dataCompany","currentCompany","arrPagination","indexPage","this","i","j","temparray","arrTotal","length","slice","push","d","toLocaleUpperCase","includes","getCompanyData","alert","body","ADD_KEYORDER","is_success","message","id","UPDATE_KEYORDER","DELETE_KEYORDER","fetchData","fetch","global","then","users","json","result","total","catch","console","log","LIST_COMPANY","resCompany","undefined","LIST_COMPANY_WITH_ID","currentC","Name","e","target","name","value","className","style","styles","success","danger","deleted","tags","searchInput","onChange","searchKey","placeholder","outline","color","floatRight","size","onClick","toggleModal","responsive","wa10","wh12","wh15","w5","row","mgl5","openUpdate","float","marginRight","padding","isOpen","field","label","flexLabel","htmlFor","flexOption","selected","_id","addUser","updateUser","disabled","toggle","Component","datePicker","marginBottom","width","height","textDecoration","marginTop","spinner","center","textAlign","tbody","overflowY","marginLeft","display","userActive","userPending","nagemonNameCol","image","borderRadius","TextFieldGroup","error","type","checkUserExists","readOnly","classnames","onBlur","defaultProps"],"mappings":"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","file":"static/js/83.f266ae34.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Row,\r\n  Table, Button, Input,\r\n  ModalHeader, ModalBody, ModalFooter, Modal,\r\n} from 'reactstrap';\r\nimport 'moment-timezone';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Constants from \"./../../../contants/contants\";\r\nimport TextFieldGroup from \"../../../views/Common/TextFieldGroup\";\r\nimport axios from 'axios'\r\nlet headers = new Headers();\r\nconst auth = localStorage.getItem('auth');\r\nheaders.append('Authorization', 'Bearer ' + auth);\r\nheaders.append('Content-Type', 'application/json');\r\nclass Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      key: '',\r\n      activePage: 1,\r\n      page: 1,\r\n      itemsCount: 0,\r\n      limit: 20,\r\n      totalActive: 0,\r\n      modalCom: false,\r\n      viewingUser: {},\r\n      communities: [],\r\n      updated: '',\r\n      dataApi: [],\r\n      action: 'new',\r\n      UserName: '',\r\n      Email: '',\r\n      Company_Id: '',\r\n      Address: '',\r\n      Phone: '',\r\n      Status: '',\r\n      modalDelete: false,\r\n      delete: null,\r\n      dataCompany: [],\r\n      currentCompany: '',\r\n      arrPagination: [],\r\n      indexPage: 0\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    this.getData()\r\n  }\r\n\r\n  pagination(dataApi) {\r\n    var i, j, temparray, chunk = 5;\r\n    var arrTotal = [];\r\n    for (i = 0, j = dataApi.length; i < j; i += chunk) {\r\n      temparray = dataApi.slice(i, i + chunk);\r\n      arrTotal.push(temparray);\r\n    }\r\n    this.setState({ arrPagination: arrTotal, data: arrTotal[this.state.indexPage] });\r\n  }\r\n\r\n  getData = async () => {\r\n    this.setState({ isLoading: true });\r\n    const res = await axios({\r\n      baseURL: Constants.BASE_URL,\r\n      url: Constants.LIST_KEYORDER,\r\n      method: 'GET',\r\n    });\r\n\r\n    this.pagination(res.data.data);\r\n    this.setState({ dataApi: res.data.data });\r\n\r\n    let active = 0\r\n\r\n    res.data.data.map(val => {\r\n      if (val.Status == \"Actived\") {\r\n        active = active + 1\r\n      }\r\n    })\r\n\r\n    this.setState({ isLoading: false, totalActive: active });\r\n  }\r\n\r\n  searchKey(key) {\r\n    const { indexPage } = this.state;\r\n    this.setState({ key: key })\r\n\r\n    if (key != '') {\r\n      let d = []\r\n      this.state.dataApi.map(val => {\r\n        if (val.UserName.toLocaleUpperCase().includes(key.toLocaleUpperCase()) || val.Email.toLocaleUpperCase().includes(key.toLocaleUpperCase())) {\r\n          d.push(val)\r\n        }\r\n      })\r\n      let active = 0\r\n\r\n      d.map(val => {\r\n        if (val.Status == \"Actived\") {\r\n          active = active + 1\r\n        }\r\n      })\r\n\r\n      this.setState({ data: d, totalActive: active })\r\n    } else {\r\n      let active = 0\r\n\r\n      this.state.dataApi.map(val => {\r\n        if (val.Status == \"Actived\") {\r\n          active = active + 1\r\n        }\r\n      })\r\n\r\n      this.setState({ data: this.state.arrPagination[indexPage], totalActive: active })\r\n    }\r\n  }\r\n\r\n  async toggleModal(key) {\r\n    await this.getCompanyData()\r\n    if (key == 'new') {\r\n      this.setState({\r\n        modalCom: !this.state.modalCom,\r\n        action: key,\r\n        UserName: '',\r\n        Email: '',\r\n        Company_Id: '',\r\n        Address: '',\r\n        Phone: '',\r\n        Status: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  onChange(key, val) {\r\n    this.setState({ [key]: val })\r\n  }\r\n\r\n  async addUser() {\r\n    const { UserName, Company_Id, Email, Address, Phone } = this.state\r\n\r\n    if (UserName == null || UserName == '' ||\r\n      Email == null || Email == '' ||\r\n      Address == null || Address == '' ||\r\n      Phone == null || Phone == '') {\r\n      alert(\"Vui lòng nhập đầy đủ trường !!!\");\r\n      return\r\n    }\r\n\r\n    const body = {\r\n      UserName: UserName,\r\n      Company_Id: Company_Id,\r\n      Email: Email,\r\n      Address: Address,\r\n      Phone: Phone\r\n    }\r\n\r\n    this.setState({ isLoading: true });\r\n    const res = await axios({\r\n      baseURL: Constants.BASE_URL,\r\n      url: Constants.ADD_KEYORDER,\r\n      method: 'PUT',\r\n      data: body\r\n    });\r\n\r\n    if (res.data.is_success == true) {\r\n      this.getData();\r\n      this.setState({ modalCom: !this.state.modalCom })\r\n    } else {\r\n      alert(res.data.message);\r\n      this.setState({ isLoading: false });\r\n    }\r\n  }\r\n\r\n  async openUpdate(item) {\r\n    await this.getCompanyData(item.Company_Id)\r\n\r\n    this.setState({\r\n      modalCom: !this.state.modalCom,\r\n      action: \"update\",\r\n      UserName: item.UserName,\r\n      Company_Id: item.Company_Id,\r\n      Email: item.Email,\r\n      Address: item.Address,\r\n      Phone: item.Phone,\r\n      id: item['_id'],\r\n      Status: item.Status\r\n    })\r\n  }\r\n\r\n  async updateUser() {\r\n    const { UserName, Company_Id, Email, Address, Phone, Status } = this.state\r\n\r\n    if (UserName == null || UserName == '' ||\r\n      Email == null || Email == '' ||\r\n      Address == null || Address == '' ||\r\n      Phone == null || Phone == '') {\r\n      alert(\"Vui lòng nhập đầy đủ trường !!!\");\r\n      return\r\n    }\r\n\r\n    const body = {\r\n      UserName: UserName,\r\n      Company_Id: Company_Id,\r\n      Email: Email,\r\n      Address: Address,\r\n      Phone: Phone,\r\n      id: this.state.id,\r\n      Status: Status\r\n    }\r\n\r\n    this.setState({ isLoading: true });\r\n    const res = await axios({\r\n      baseURL: Constants.BASE_URL,\r\n      url: Constants.UPDATE_KEYORDER,\r\n      method: 'POST',\r\n      data: body\r\n    });\r\n\r\n    if (res.data.is_success == true) {\r\n      this.getData();\r\n      this.setState({ modalCom: !this.state.modalCom })\r\n    } else {\r\n      alert(res.data.message);\r\n      this.setState({ isLoading: false });\r\n    }\r\n  }\r\n\r\n  openDelete = (item) => {\r\n    this.setState({\r\n      modalDelete: !this.state.modalDelete,\r\n      delete: item\r\n    })\r\n  }\r\n\r\n  async delete() {\r\n    this.setState({ isLoading: true });\r\n    const res = await axios({\r\n      baseURL: Constants.BASE_URL,\r\n      url: Constants.DELETE_KEYORDER,\r\n      method: 'DELETE',\r\n      data: {\r\n        \"id\": this.state.delete['_id']\r\n      }\r\n    });\r\n\r\n    if (res.data.is_success == true) {\r\n      this.getData();\r\n      this.setState({ modalDelete: !this.state.modalDelete, delete: null })\r\n    } else {\r\n      alert(res.data.message);\r\n      this.setState({ isLoading: false });\r\n    }\r\n\r\n  }\r\n\r\n  getUsers(page = 1) {\r\n    const limit = this.state.limit;\r\n    const key = this.state.key || '';\r\n    const fetchData = {\r\n      method: 'GET',\r\n      headers: headers\r\n    };\r\n    fetch(global.BASE_URL + '/admin/users?key=' + key + '&page=' + page + '&limit=' + limit, fetchData).then(users => {\r\n      users.json().then(result => {\r\n        this.setState({\r\n          data: result.data,\r\n          itemsCount: result.total,\r\n          activePage: page,\r\n          totalActive: result.totalActive,\r\n          updated: '',\r\n        });\r\n      })\r\n    }).catch(console.log);\r\n  }\r\n\r\n  async getCompanyData(id) {\r\n    const resCompany = await axios({\r\n      baseURL: Constants.BASE_URL,\r\n      url: Constants.LIST_COMPANY,\r\n      method: 'POST',\r\n    });\r\n\r\n    if (id != '' || id != undefined) {\r\n      const currentC = await axios({\r\n        baseURL: Constants.BASE_URL,\r\n        url: Constants.LIST_COMPANY_WITH_ID + id,\r\n        method: 'POST',\r\n      });\r\n      if (currentC.data.data != null || currentC.data.data != undefined) {\r\n        this.setState({ currentCompany: currentC.data.data.Name });\r\n      }\r\n    }\r\n    this.setState({ dataCompany: resCompany.data.data });\r\n  }\r\n\r\n  inputChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { data, key, dataCompany,\r\n      currentCompany, action, arrPagination, indexPage } = this.state;\r\n\r\n    if (!this.state.isLoading) {\r\n      return (\r\n        <div className=\"animated fadeIn\">\r\n          <Row>\r\n            <Col>\r\n              <p style={styles.success}>{this.state.updated}</p>\r\n              <p style={styles.danger}>{this.state.deleted}</p>\r\n              <Card>\r\n                <CardHeader>\r\n                  <i className=\"fa fa-align-justify\"> KEY ORDER (Total: {this.state.data != undefined || this.state.data != null ?\r\n                    this.state.data.length : 0}, Active: {this.state.totalActive}, Page: {this.state.indexPage + 1})</i>\r\n                  <div style={styles.tags}>\r\n                    <div>\r\n                      <Input style={styles.searchInput} onChange={(e) => this.searchKey(e.target.value)} name=\"key\" value={key} placeholder=\"Search\" />\r\n                      <Button outline color=\"primary\" style={styles.floatRight} size=\"sm\" onClick={async e => await this.toggleModal(\"new\")}>Add</Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <Table responsive>\r\n                    <thead>\r\n                      <tr>\r\n                        <th style={styles.wa10}>No.</th>\r\n                        <th style={styles.wh12}>UserName</th>\r\n                        <th style={styles.wh15}>Company ID</th>\r\n                        <th style={styles.wh15}>Email</th>\r\n                        <th style={styles.wh15}>Address</th>\r\n                        <th style={styles.wh12}>Phone</th>\r\n                        <th style={styles.wh12}>Status</th>\r\n                        <th style={styles.w5}>Action</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {\r\n                        data != undefined ?\r\n                          data.map((item, i) => {\r\n                            return (\r\n                              <tr key={i} style={styles.row}>\r\n                                <td style={styles.wa10}>{i + 1}</td>\r\n                                <td style={styles.wh12}>{item.UserName}</td>\r\n                                <td style={styles.wh15}>{item.Company_Id}</td>\r\n                                <td style={styles.wh15}>{item.Email}</td>\r\n                                <td style={styles.wh15}>{item.Address}</td>\r\n                                <td style={styles.wh12}>{item.Phone}</td>\r\n                                <td style={styles.wh12}>{item.Status}</td>\r\n                                <td style={styles.w5}>\r\n                                  <Button style={styles.mgl5} outline color=\"primary\" size=\"sm\" onClick={async (e) => await this.openUpdate(item)} >Cập nhật</Button>{' '}\r\n                                  <Button outline color=\"danger\" size=\"sm\" onClick={(e) => { this.openDelete(item) }}>Xoá</Button>\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          }) : \"\"\r\n                      }\r\n                    </tbody>\r\n                  </Table>\r\n                </CardBody>\r\n              </Card>\r\n              {\r\n                arrPagination.length == 1 ? \"\" :\r\n                  <div style={{ float: 'right', marginRight: '10px', padding: '10px' }}>\r\n                    <tr style={styles.row}>\r\n                      {\r\n                        arrPagination.map((item, i) => {\r\n                          return (\r\n                            <td>\r\n                              <Button style={styles.pagination} color={i == indexPage ? 'primary' : 'danger'} onClick={e => { this.setState({ data: arrPagination[i], indexPage: i }) }}>{i + 1}</Button>\r\n                            </td>\r\n                          );\r\n                        })\r\n                      }\r\n                    </tr>\r\n                  </div>\r\n              }\r\n            </Col>\r\n          </Row>\r\n\r\n          <Modal isOpen={this.state.modalCom} className={this.props.className}>\r\n            <ModalHeader>{this.state.action == 'new' ? `Tạo mới` : `Cập nhật`}</ModalHeader>\r\n            <ModalBody>\r\n              <TextFieldGroup\r\n                field=\"UserName\"\r\n                label=\"UserName\"\r\n                value={this.state.UserName}\r\n                placeholder={\"UserName\"}\r\n                // error={errors.title}\r\n                onChange={e => this.onChange(\"UserName\", e.target.value)}\r\n              // rows=\"5\"\r\n              />\r\n\r\n              <div>\r\n                <label style={styles.flexLabel} htmlFor=\"tag\">Company:    </label>\r\n                <select style={styles.flexOption} name=\"Company_Id\" onChange={e => this.onChange(\"Company_Id\", e.target.value)}>\r\n                  <option value={this.state.Company_Id}>-----</option>\r\n                  {\r\n                    dataCompany.map((item, i) => {\r\n                      if (item.Name == currentCompany) {\r\n                        return (\r\n                          <option selected value={item._id}>{item.Name}</option>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <option value={item._id}>{item.Name}</option>\r\n                        );\r\n                      }\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n\r\n              <TextFieldGroup\r\n                field=\"Email\"\r\n                label=\"Email\"\r\n                value={this.state.Email}\r\n                placeholder={\"Email\"}\r\n                // error={errors.title}\r\n                onChange={e => this.onChange(\"Email\", e.target.value)}\r\n              // rows=\"5\"\r\n              />\r\n\r\n              <TextFieldGroup\r\n                field=\"Address\"\r\n                label=\"Address\"\r\n                value={this.state.Address}\r\n                placeholder={\"Address\"}\r\n                // error={errors.title}\r\n                onChange={e => this.onChange(\"Address\", e.target.value)}\r\n              // rows=\"5\"\r\n              />\r\n\r\n              <TextFieldGroup\r\n                field=\"Phone\"\r\n                label=\"Phone\"\r\n                value={this.state.Phone}\r\n                placeholder={\"Phone\"}\r\n                // error={errors.title}\r\n                onChange={e => this.onChange(\"Phone\", e.target.value)}\r\n              // rows=\"5\"\r\n              />\r\n\r\n              {\r\n                action == 'new' ? \"\" : <div>\r\n                  <label style={styles.flexLabel} htmlFor=\"tag\">Trạng thái:</label>\r\n                  <select style={styles.flexOption} name=\"Status\" onChange={e => this.onChange(\"Status\", e.target.value)}>\r\n                    <option value={this.state.Status}>{this.state.Status == '' ? ` - - - - - - - - - - ` : this.state.Status}</option>\r\n                    <option value={'Actived'}>Actived</option>\r\n                    <option value={'Locked'}>Locked</option>\r\n                    <option value={'Deactived'}>Deactived</option>\r\n                  </select>\r\n                </div>\r\n              }\r\n\r\n\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"primary\" onClick={e => { this.state.action === 'new' ? this.addUser() : this.updateUser() }} disabled={this.state.isLoading}>Lưu</Button>{' '}\r\n              <Button color=\"secondary\" onClick={e => this.toggleModal(\"new\")}>Đóng</Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n\r\n          <Modal isOpen={this.state.modalDelete} toggle={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })} className={this.props.className}>\r\n            <ModalHeader toggle={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })}>{`Xoá`}</ModalHeader>\r\n            <ModalBody>\r\n              <label htmlFor=\"tag\">{`Do you want to delete user \"${this.state.delete ? this.state.delete.Email : ''}\" ?`}</label>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"primary\" onClick={e => this.delete()} disabled={this.state.isLoading}>Xoá</Button>{' '}\r\n              <Button color=\"secondary\" onClick={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })}>Đóng</Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div id=\"page-loading\">\r\n        <div className=\"three-balls\">\r\n          <div className=\"ball ball1\"></div>\r\n          <div className=\"ball ball2\"></div>\r\n          <div className=\"ball ball3\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  datePicker: {\r\n    marginBottom: 20\r\n  },\r\n  wa10: {\r\n    width: \"5%\",\r\n    float: \"left\",\r\n    height: \"80px\"\r\n  },\r\n  pagination: {\r\n    marginRight: '5px'\r\n  },\r\n  flexLabel: {\r\n    width: 100\r\n  },\r\n  flexOption: {\r\n    width: 300\r\n  },\r\n  a: {\r\n    textDecoration: 'none'\r\n  },\r\n  floatRight: {\r\n    float: \"right\",\r\n    marginTop: '3px'\r\n  },\r\n  spinner: {\r\n    width: \"30px\"\r\n  },\r\n  center: {\r\n    textAlign: \"center\"\r\n  },\r\n  tbody: {\r\n    height: \"380px\",\r\n    overflowY: \"auto\"\r\n  },\r\n  wh12: {\r\n    width: \"10%\",\r\n    float: \"left\",\r\n    height: \"80px\"\r\n  },\r\n  wh15: {\r\n    width: \"16%\",\r\n    float: \"left\",\r\n    height: \"80px\"\r\n  },\r\n  w5: {\r\n    width: \"12%\",\r\n    float: \"left\",\r\n    height: \"80px\"\r\n  },\r\n  row: {\r\n    float: \"left\",\r\n    width: \"100%\"\r\n  },\r\n  success: {\r\n    color: 'green'\r\n  },\r\n  danger: {\r\n    color: 'red'\r\n  },\r\n  mgl5: {\r\n    marginLeft: '5px'\r\n  },\r\n  tags: {\r\n    float: \"right\",\r\n    marginRight: \"5px\",\r\n    width: \"250px\"\r\n  },\r\n  searchInput: {\r\n    width: \"190px\",\r\n    display: 'inline-block',\r\n  },\r\n  userActive: {\r\n    color: 'green'\r\n  },\r\n  userPending: {\r\n    color: 'red'\r\n  },\r\n  nagemonNameCol: {\r\n    width: '328px'\r\n  },\r\n  image: {\r\n    width: '100px',\r\n    height: '100px',\r\n    borderRadius: '99999px'\r\n  },\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextFieldGroup = ({ field, value, label, error, type, onChange, checkUserExists, readOnly, placeholder, onClick }) => {\r\n  return (\r\n    <div className={classnames('form-group', { 'has-error': error })}>\r\n      <label className=\"control-label\">{label}</label>\r\n      <input\r\n        onChange={onChange}\r\n        onClick={onClick}\r\n        onBlur={checkUserExists}\r\n        value={value}\r\n        type={type}\r\n        name={field}\r\n        placeholder={placeholder}\r\n        readOnly={readOnly}\r\n        className=\"form-control\"\r\n      />\r\n    {error && <span className=\"help-block\">{error}</span>}\r\n    </div>  );\r\n}\r\n\r\nTextFieldGroup.propTypes = {\r\n  field: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  error: PropTypes.string,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  checkUserExists: PropTypes.func\r\n}\r\n\r\nTextFieldGroup.defaultProps = {\r\n  type: 'text'\r\n}\r\n\r\nexport default TextFieldGroup;\r\n"],"sourceRoot":""}