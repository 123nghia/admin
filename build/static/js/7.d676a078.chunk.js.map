{"version":3,"sources":["views/Common/TextArea.js","views/UserAdmin/index.js"],"names":["TextArea","field","value","label","error","type","onChange","checkUserExists","rows","className","classnames","onBlur","name","defaultProps","headers","Headers","auth","localStorage","getItem","append","Users","props","getData","a","setState","isLoading","axios","baseURL","url","method","res","data","dataApi","active","map","val","Status","totalActive","openDelete","item","modalDelete","state","delete","key","activePage","page","itemsCount","limit","modalCom","viewingUser","communities","updated","action","Email","Name","Phone","Gender","Company_Id","Role_Id","UserName","Password","Sale_Id","Code","dataCompany","currentCompany","this","d","toLocaleUpperCase","includes","push","getCompanyData","alert","body","is_success","toggleModal","message","id","fetchData","fetch","global","BASE_URL","then","users","json","result","total","catch","console","log","resCompany","undefined","currentC","e","target","getUsers","style","styles","success","danger","deleted","length","tags","searchInput","searchKey","placeholder","outline","color","floatRight","size","onClick","responsive","wh12","wh15","w5","i","row","openUpdate","isOpen","toggle","readOnly","flexLabel","htmlFor","flexOption","_id","addUser","updateUser","disabled","Component","width","textDecoration","float","marginTop","spinner","center","textAlign","tbody","height","overflowY","mgl5","marginLeft","marginRight","display","userActive","userPending","nagemonNameCol","image","borderRadius","marginBottom"],"mappings":"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","file":"static/js/7.d676a078.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextArea = ({ field, value, label, error, type, onChange, checkUserExists, rows }) => {\n  return (\n    <div className={classnames('form-group', { 'has-error': error })}>\n      <label className=\"control-label\">{label}</label>\n      <textarea\n        onChange={onChange}\n        onBlur={checkUserExists}\n        value={value}\n        type={type}\n        name={field}\n        className=\"form-control blacktext\"\n        rows={rows}\n      >\n      </textarea>\n    {error && <span className=\"help-block\">{error}</span>}\n    </div>  );\n}\nTextArea.propTypes = {\n  field: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  rows: PropTypes.string,\n  error: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  checkUserExists: PropTypes.func\n}\n\nTextArea.defaultProps = {\n  type: 'text',\n  rows: '3'\n}\n\nexport default TextArea;","import React, { Component } from 'react';\n\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    Row,\n    Table, Button, Input,\n    ModalHeader, ModalBody, ModalFooter, Modal,\n    Alert\n} from 'reactstrap';\nimport 'moment-timezone';\nimport TextArea from \"../Common/TextArea\";\nimport TextFieldGroup from \"../Common/TextFieldGroup\";\nimport Pagination from \"react-js-pagination\";\nimport axios from 'axios'\nlet headers = new Headers();\nconst auth = localStorage.getItem('auth');\nheaders.append('Authorization', 'Bearer ' + auth);\nheaders.append('Content-Type', 'application/json');\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            key: '',\n            activePage: 1,\n            page: 1,\n            itemsCount: 0,\n            limit: 20,\n            totalActive: 0,\n            modalCom: false,\n            viewingUser: {},\n            communities: [],\n            updated: '',\n            dataApi: [],\n            action: 'new',\n            Email: '',\n            Name: '',\n            Phone: '',\n            Gender: 'Nam',\n            Company_Id: '',\n            Role_Id: '',\n            UserName: '',\n            Password: '',\n            Sale_Id: '',\n            Code: '',\n            Status: '',\n            modalDelete: false,\n            delete: null,\n            dataCompany: [],\n            currentCompany: ''\n        };\n    }\n    async componentDidMount() {\n        this.getData()\n    }\n\n    getData = async () => {\n        this.setState({ isLoading: true });\n        const res = await axios({\n            baseURL: 'http://thanhvien.applamdep.com',\n            url: '/api/list-user',\n            method: 'GET',\n        });\n\n        this.setState({ data: res.data.data, dataApi: res.data.data });\n\n        let active = 0\n\n        res.data.data.map(val => {\n            if (val.Status == \"Actived\") {\n                active = active + 1\n            }\n        })\n\n        this.setState({ isLoading: false, totalActive: active });\n    }\n\n    searchKey(key) {\n        this.setState({ key: key })\n\n        if (key != '') {\n            let d = []\n            this.state.dataApi.map(val => {\n                if (val.Name.toLocaleUpperCase().includes(key.toLocaleUpperCase()) || val.Email.toLocaleUpperCase().includes(key.toLocaleUpperCase())) {\n                    d.push(val)\n                }\n            })\n            let active = 0\n\n            d.map(val => {\n                if (val.Status == \"Actived\") {\n                    active = active + 1\n                }\n            })\n\n            this.setState({ data: d, totalActive: active })\n        } else {\n            let active = 0\n\n            this.state.dataApi.map(val => {\n                if (val.Status == \"Actived\") {\n                    active = active + 1\n                }\n            })\n\n            this.setState({ data: this.state.dataApi, totalActive: active })\n        }\n    }\n\n    async toggleModal(key) {\n        await this.getCompanyData()\n        if (key == 'new') {\n            this.setState({\n                modalCom: !this.state.modalCom,\n                action: key,\n                Email: '',\n                Name: '',\n                Phone: '',\n                Gender: 'Nam',\n                Company_Id: '',\n                Role_Id: '',\n                UserName: '',\n                Password: '',\n                Sale_Id: '',\n                Code: ''\n            })\n        }\n    }\n\n    onChange(key, val) {\n        this.setState({ [key]: val })\n    }\n\n    async addUser() {\n        const { Email, Name, Phone, UserName, Code, Password, Gender, Role_Id, Company_Id, Sale_Id } = this.state\n\n        if (Email == null || Email == ''\n            || Name == null || Name == ''\n            || Phone == null || Phone == ''\n            || UserName == null || UserName == ''\n            || Code == null || Code == ''\n            || Password == null || Password == '') {\n            alert(\"Please fill in all the requirements\");\n            return\n        }\n\n        const body = {\n            Email: Email,\n            Name: Name,\n            Phone: Phone,\n            Gender: Gender,\n            Company_Id: Company_Id,\n            Role_Id: Role_Id,\n            UserName: UserName,\n            Password: Password,\n            Sale_Id: Sale_Id,\n            Code: Code\n        }\n\n        this.setState({ isLoading: true });\n        const res = await axios({\n            baseURL: 'http://thanhvien.applamdep.com',\n            url: '/api/add-user',\n            method: 'PUT',\n            data: body\n        });\n\n        if (res.data.is_success == true) {\n            this.getData();\n            this.toggleModal(\"new\");\n        } else {\n            alert(res.data.message);\n            this.setState({ isLoading: false });\n        }\n    }\n\n    async openUpdate(item) {\n        await this.getCompanyData(item.Company_Id)\n\n        this.setState({\n            modalCom: !this.state.modalCom,\n            action: \"update\",\n            Email: item.Email,\n            Name: item.Name,\n            Phone: item.Phone,\n            Gender: item.Gender,\n            Company_Id: item.Company_Id,\n            Role_Id: item.Role_Id,\n            UserName: item.UserName,\n            Password: item.Password,\n            Sale_Id: item.Sale_Id,\n            Code: item.Code,\n            id: item['_id'],\n            Status: item.Status\n        })\n    }\n\n    async updateUser() {\n        const { Email, Name, Phone, UserName, Code, Password, Gender, Role_Id, Company_Id, Sale_Id, Status } = this.state\n\n        if (Email == null || Email == ''\n            || Name == null || Name == ''\n            || Phone == null || Phone == ''\n            || UserName == null || UserName == ''\n            || Code == null || Code == ''\n            || Password == null || Password == '') {\n            alert(\"Please fill in all the requirements\");\n            return\n        }\n\n        const body = {\n            Email: Email,\n            Name: Name,\n            Phone: Phone,\n            Gender: Gender,\n            Company_Id: Company_Id,\n            Role_Id: Role_Id,\n            UserName: UserName,\n            Password: Password,\n            Sale_Id: Sale_Id,\n            Code: Code,\n            id: this.state.id,\n            Status: Status\n        }\n\n        this.setState({ isLoading: true });\n        const res = await axios({\n            baseURL: 'http://thanhvien.applamdep.com',\n            url: '/api/update-user',\n            method: 'POST',\n            data: body\n        });\n\n        if (res.data.is_success == true) {\n            this.getData();\n            this.toggleModal(\"new\");\n        } else {\n            alert(res.data.message);\n            this.setState({ isLoading: false });\n        }\n    }\n\n    openDelete = (item) => {\n        this.setState({\n            modalDelete: !this.state.modalDelete,\n            delete: item\n        })\n    }\n\n    async delete() {\n        this.setState({ isLoading: true });\n        const res = await axios({\n            baseURL: 'http://thanhvien.applamdep.com',\n            url: '/api/delete-user',\n            method: 'DELETE',\n            data: {\n                \"id\": this.state.delete['_id']\n            }\n        });\n\n        if (res.data.is_success == true) {\n            this.getData();\n            this.setState({ modalDelete: !this.state.modalDelete, delete: null })\n        } else {\n            alert(res.data.message);\n            this.setState({ isLoading: false });\n        }\n\n    }\n\n    getUsers(page = 1) {\n        const limit = this.state.limit;\n        const key = this.state.key || '';\n        const fetchData = {\n            method: 'GET',\n            headers: headers\n        };\n        fetch(global.BASE_URL + '/admin/users?key=' + key + '&page=' + page + '&limit=' + limit, fetchData).then(users => {\n            users.json().then(result => {\n                this.setState({\n                    data: result.data,\n                    itemsCount: result.total,\n                    activePage: page,\n                    totalActive: result.totalActive,\n                    updated: '',\n                });\n            })\n        }).catch(console.log);\n    }\n\n    async getCompanyData(id) {\n        const resCompany = await axios({\n            baseURL: 'http://thanhvien.applamdep.com',\n            url: '/api/list-company',\n            method: 'GET',\n        });\n\n        if(id != '' || id != undefined){\n            const currentC = await axios({\n                baseURL: 'http://thanhvien.applamdep.com',\n                url: '/api/list-company?id=' + id,\n                method: 'GET',\n            });\n    \n            this.setState({ currentCompany: currentC.data.data.Name });\n        }\n        this.setState({ dataCompany: resCompany.data.data });\n    }\n\n    // async handlePageChange(pageNumber) {\n    //     this.getUsers(pageNumber);\n    // }\n    // toggle(action = '') {\n    //     this.setState({\n    //         modal: !this.state.modal,\n    //         image: '',\n    //         url: '',\n    //         isActive: false,\n    //         isLoading: false,\n    //         errors: {},\n    //         action,\n    //         position: 1,\n    //         data: [],\n    //         updated: '',\n    //     });\n    // }\n    inputChange(e) {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n    goSearch() {\n        this.getUsers();\n    }\n    // toggleChannel() {\n\n    // }\n    // execUpdateCommunity(user) {\n\n    // }\n    // setUserCommunityAdmin(address, communityId, admin = true) {\n    // }\n    render() {\n        const { data, key, viewingUser, communities, dataCompany } = this.state;\n        if (!this.state.isLoading) {\n            return (\n                <div className=\"animated fadeIn\">\n                    <Row>\n                        <Col>\n                            <p style={styles.success}>{this.state.updated}</p>\n                            <p style={styles.danger}>{this.state.deleted}</p>\n                            <Card>\n                                <CardHeader>\n                                    <i className=\"fa fa-align-justify\"></i> USERS (Total: {this.state.data.length}, Active: {this.state.totalActive})\n                                    <div style={styles.tags}>\n                                        <div>\n                                            <Input style={styles.searchInput} onChange={(e) => this.searchKey(e.target.value)} name=\"key\" value={key} placeholder=\"Search\" />\n                                            <Button outline color=\"primary\" style={styles.floatRight} size=\"sm\" onClick={async e => await this.toggleModal(\"new\")}>Add</Button>\n                                        </div>\n                                    </div>\n                                </CardHeader>\n                                <CardBody>\n                                    <Table responsive>\n                                        <thead>\n                                            <tr>\n                                                <th style={styles.wh12}>No.</th>\n                                                <th style={styles.wh12}>Username</th>\n                                                <th style={styles.wh12}>Name</th>\n                                                <th style={styles.wh15}>Email</th>\n                                                <th style={styles.wh12}>Phone</th>\n                                                <th style={styles.wh12}>Gender</th>\n                                                <th style={styles.wh12}>Status</th>\n                                                <th style={styles.wh12}>Code</th>\n                                                <th style={styles.w5}>Action</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                data.map((item, i) => {\n                                                    return (\n                                                        <tr key={i} style={styles.row}>\n                                                            <td style={styles.wh12}>{i + 1}</td>\n                                                            <td style={styles.wh12}>{item.UserName}</td>\n                                                            <td style={styles.wh12}>{item.Name}</td>\n                                                            <td style={styles.wh15}>{item.Email}</td>\n                                                            <td style={styles.wh12}>{item.Phone}</td>\n                                                            <td style={styles.wh12}>{item.Gender}</td>\n                                                            <td style={styles.wh12}>{item.Status}</td>\n                                                            <td style={styles.wh12}>{item.Code}</td>\n                                                            <td style={styles.w5}>\n                                                                <Button outline color=\"primary\" size=\"sm\" onClick={async (e) => await this.openUpdate(item)} >Update</Button>{' '}\n                                                                <Button outline color=\"danger\" size=\"sm\" onClick={(e) => { this.openDelete(item) }}>Delete</Button>\n                                                            </td>\n                                                        </tr>\n                                                    );\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                </CardBody>\n                            </Card>\n                            {/* <Pagination\n                                activePage={this.state.activePage}\n                                itemsCountPerPage={this.state.limit}\n                                totalItemsCount={this.state.itemsCount}\n                                pageRangeDisplayed={10} // so luong item hien thi tren pagination number\n                                onChange={e => this.handlePageChange(e)}\n                                itemClass=\"page-item\"\n                                linkClass=\"page-link\"\n                            /> */}\n                        </Col>\n                    </Row>\n\n                    <Modal isOpen={this.state.modalCom} toggle={e => this.toggleModal('new')} className={this.props.className}>\n                        <ModalHeader toggle={e => this.toggleModal('new')}>{this.state.action == 'new' ? `Create` : `Update`}</ModalHeader>\n                        <ModalBody>\n                            <TextFieldGroup\n                                field=\"Email\"\n                                label=\"Email or phone number\"\n                                value={this.state.Email}\n                                // error={errors.title}\n                                onChange={e => this.onChange(\"Email\", e.target.value)}\n                            // rows=\"5\"\n                            />\n                            <TextFieldGroup\n                                field=\"Name\"\n                                label=\"Name\"\n                                value={this.state.Name}\n                                // error={errors.title}\n                                onChange={e => this.onChange(\"Name\", e.target.value)}\n                            // rows=\"5\"\n                            />\n\n                            <TextFieldGroup\n                                field=\"Password\"\n                                label=\"Password\"\n                                value={this.state.Password}\n                                type={\"password\"}\n                                readOnly={true}\n                                onChange={e => this.onChange(\"Password\", e.target.value)}\n                            // rows=\"5\"\n                            />\n\n                            <TextFieldGroup\n                                field=\"Code\"\n                                label=\"Code\"\n                                value={this.state.Code}\n                                // error={errors.title}\n                                onChange={e => this.onChange(\"Code\", e.target.value)}\n                            // rows=\"5\"\n                            />\n\n                            <TextFieldGroup\n                                field=\"UserName\"\n                                label=\"UserName\"\n                                value={this.state.UserName}\n                                // error={errors.title}\n                                onChange={e => this.onChange(\"UserName\", e.target.value)}\n                            // rows=\"5\"\n                            />\n\n                            <TextFieldGroup\n                                field=\"Phone\"\n                                label=\"Phone\"\n                                value={this.state.Phone}\n                                // error={errors.title}\n                                onChange={e => this.onChange(\"Phone\", e.target.value)}\n                            // rows=\"5\"\n                            />\n\n                            <div>\n                                <label style={styles.flexLabel} htmlFor=\"tag\">Gender:    </label>\n                                <select style={styles.flexOption} name=\"Gender\" onChange={e => this.onChange(\"Gender\", e.target.value)}>\n                                    <option value={'Nam'}>Nam</option>\n                                    <option value={'Nữ'}>Nữ</option>\n                                </select>\n                            </div>\n\n                            <div>\n                                <label style={styles.flexLabel} htmlFor=\"tag\">Company:    </label>\n                                <select style={styles.flexOption} name=\"Company_Id\" onChange={e => this.onChange(\"Company_Id\", e.target.value)}>\n                                    <option value={this.state.Company_Id}>{this.state.Company_Id == '' ? ` - - - - - - - - - - ` : this.state.currentCompany}</option>\n                                    {\n                                        dataCompany.map((item, i) => {\n                                            return (\n                                                <option value={item._id}>{item.Name}</option>  \n                                            );\n                                        })\n                                    }\n                                </select>\n                            </div>\n\n                            <div>\n                                <label style={styles.flexLabel} htmlFor=\"tag\">Role:    </label>\n                                <select style={styles.flexOption} name=\"Role_Id\" onChange={e => this.onChange(\"Role_Id\", e.target.value)}>\n                                    <option value={this.state.Role_Id}>{this.state.Role_Id == '' ? ` - - - - - - - - - - ` : this.state.Role_Id}</option>\n                                </select>\n                            </div>\n\n                            <div>\n                                <label style={styles.flexLabel} htmlFor=\"tag\">Sale:    </label>\n                                <select style={styles.flexOption} name=\"Sale_Id\" onChange={e => this.onChange(\"Sale_Id\", e.target.value)}>\n                                    <option value={this.state.Sale_Id}>{this.state.Sale_Id == '' ? ` - - - - - - - - - - ` : this.state.Sale_Id}</option>\n                                </select>\n                            </div>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={e => { this.state.action === 'new' ? this.addUser() : this.updateUser() }} disabled={this.state.isLoading}>Save</Button>{' '}\n                            <Button color=\"secondary\" onClick={e => this.toggleModal(\"new\")}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n\n                    <Modal isOpen={this.state.modalDelete} toggle={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })} className={this.props.className}>\n                        <ModalHeader toggle={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })}>{`Delete`}</ModalHeader>\n                        <ModalBody>\n                            <label htmlFor=\"tag\">{`Do you want to delete user \"${this.state.delete ? this.state.delete.Email : ''}\" ?`}</label>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={e => this.delete()} disabled={this.state.isLoading}>Delete</Button>{' '}\n                            <Button color=\"secondary\" onClick={e => this.setState({ modalDelete: !this.state.modalDelete, delete: null })}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            );\n        }\n        return (\n            <div id=\"page-loading\">\n                <div className=\"three-balls\">\n                    <div className=\"ball ball1\"></div>\n                    <div className=\"ball ball2\"></div>\n                    <div className=\"ball ball3\"></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst styles = {\n    flexLabel: {\n        width: 100\n    },\n    flexOption: {\n        width: 300\n    },\n    a: {\n        textDecoration: 'none'\n    },\n    floatRight: {\n        float: \"right\",\n        marginTop: '3px'\n    },\n    spinner: {\n        width: \"30px\"\n    },\n    center: {\n        textAlign: \"center\"\n    },\n    tbody: {\n        height: \"380px\",\n        overflowY: \"auto\"\n    },\n    wh12: {\n        width: \"10%\",\n        float: \"left\",\n        height: \"80px\"\n    },\n    wh15: {\n        width: \"20%\",\n        float: \"left\",\n        height: \"80px\"\n    },\n    w5: {\n        width: \"10%\",\n        float: \"left\",\n        height: \"80px\"\n    },\n    row: {\n        float: \"left\",\n        width: \"100%\"\n    },\n    success: {\n        color: 'green'\n    },\n    danger: {\n        color: 'red'\n    },\n    mgl5: {\n        marginLeft: '5px'\n    },\n    tags: {\n        float: \"right\",\n        marginRight: \"5px\",\n        width: \"250px\"\n    },\n    searchInput: {\n        width: \"190px\",\n        display: 'inline-block',\n    },\n    userActive: {\n        color: 'green'\n    },\n    userPending: {\n        color: 'red'\n    },\n    nagemonNameCol: {\n        width: '328px'\n    },\n    image: {\n        width: '100px',\n        height: '100px',\n        borderRadius: '99999px'\n    },\n    mgl5: {\n        marginBottom: '5px'\n    }\n}\n\nexport default Users;\n"],"sourceRoot":""}